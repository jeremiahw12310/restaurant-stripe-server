rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isPostOwner(postUserId) {
      return isAuthenticated() && request.auth.uid == postUserId;
    }
    
    // Users collection - users can read their own profile, admins can read all
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId) || isAdmin();
      
      // User activity subcollection
      match /activity/{activityId} {
        allow read, write: if isOwner(userId) || isAdmin();
      }
    }
    
    // Posts collection - public read, authenticated users can create, owners can edit/delete
    match /posts/{postId} {
      allow read: if true; // Public read for all posts
      allow create: if isAuthenticated(); // Any authenticated user can create posts
      allow update, delete: if isPostOwner(resource.data.userId) || isAdmin(); // Only post owner or admin can edit/delete
      
      // Post likes subcollection
      match /likes/{likeId} {
        allow read: if true; // Public read for likes
        allow write: if isAuthenticated() && likeId == request.auth.uid; // Users can only manage their own likes
      }
      
      // Post replies subcollection
      match /replies/{replyId} {
        allow read: if true; // Public read for replies
        allow create: if isAuthenticated(); // Any authenticated user can create replies
        allow update, delete: if isAuthenticated() && 
          (resource.data.userId == request.auth.uid || isAdmin()); // Only reply owner or admin can edit/delete
      }
      
      // Post reactions subcollection
      match /reactions/{reactionId} {
        allow read: if true; // Public read for reactions
        allow write: if isAuthenticated() && reactionId == request.auth.uid; // Users can only manage their own reactions
      }
    }
    
    // Collection group queries for replies and likes
    match /{path=**}/replies/{replyId} {
      allow read: if true; // Public read for all replies across all posts
      allow create: if isAuthenticated(); // Any authenticated user can create replies
      allow update, delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin()); // Only reply owner or admin can edit/delete
    }
    
    match /{path=**}/likes/{likeId} {
      allow read: if true; // Public read for all likes across all posts
      allow write: if isAuthenticated() && likeId == request.auth.uid; // Users can only manage their own likes
    }
    
    // Crowd meter collection - public read, admin write
    match /crowdMeter/{document} {
      allow read: if true; // Public read for crowd levels
      allow write: if isAdmin(); // Only admins can update crowd levels
    }
    
    // Menu collection - public read, admin write
    match /menu/{categoryId} {
      allow read: if true; // Public read for menu categories
      allow write: if isAdmin(); // Only admins can modify menu categories
      
      // Menu items subcollection
      match /items/{itemId} {
        allow read: if true; // Public read for menu items
        allow write: if isAdmin(); // Only admins can modify menu items
      }
      
      // Toppings subcollection
      match /toppings/{toppingId} {
        allow read: if true; // Public read for toppings
        allow write: if isAdmin(); // Only admins can modify toppings
      }
    }
    
    // Analytics collection - admin only
    match /analytics/{document} {
      allow read, write: if isAdmin(); // Only admins can access analytics
    }
    
    // Reports collection - admin only
    match /reports/{reportId} {
      allow read, write: if isAdmin(); // Only admins can access reports
    }
    
    // Admin actions collection - admin only
    match /adminActions/{actionId} {
      allow read, write: if isAdmin(); // Only admins can access admin actions
    }
    
    // Notifications collection - users can read their own, admins can read all
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow write: if isAdmin(); // Only admins can create notifications
    }
    
    // Verification requests collection - admin only
    match /verificationRequests/{requestId} {
      allow read, write: if isAdmin(); // Only admins can access verification requests
    }
    
    // Points transactions collection - users can read/write their own transactions
    match /pointsTransactions/{transactionId} {
      allow read, write: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin()); // Users can only access their own transactions, admins can access all
    }
    
    // Drink flavors collection - public read, admin write
    match /drinkFlavors/{flavorId} {
      allow read: if true; // Public read for drink flavors
      allow write: if isAdmin(); // Only admins can modify drink flavors
    }
    
    // Drink options collection - public read, admin write
    match /drinkOptions/{optionId} {
      allow read: if true; // Public read for drink options
      allow write: if isAdmin(); // Only admins can modify drink options
    }
    
    // Drink toppings collection - public read, admin write
    match /drinkToppings/{toppingId} {
      allow read: if true; // Public read for drink toppings
      allow write: if isAdmin(); // Only admins can modify drink toppings
    }
    
    // Menu order collection - admin only
    match /menuOrder/{document} {
      allow read, write: if isAdmin(); // Only admins can modify menu order
    }
    
    // Config collection - admin only
    match /config/{document} {
      allow read, write: if isAdmin(); // Only admins can modify config
    }
    
    // Used receipts collection - authenticated users can read/write to prevent duplicate scans
    match /usedReceipts/{receiptId} {
      allow read, write: if isAuthenticated(); // Any authenticated user can read/write to check for duplicates
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 